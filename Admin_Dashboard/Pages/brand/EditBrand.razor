@page "/brand/edit/{id:int}"
@inject BrandService BrandService
@inject NavigationManager NavManager

<EditForm Model="Brand" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    @if (!string.IsNullOrEmpty(alertMessage))
    {
        <div class="alert @alertClass alert-dismissible fade show" role="alert">
            @alertMessage
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    @if (Brand == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="card shadow-sm mt-4">
            <div class="card-header bg-warning text-dark">
                <h4 class="mb-0">✏️ Edit Category</h4>
            </div>
            <div class="card-body">
                <div class="mb-3">
                    <label for="name" class="form-label">Category Name</label>
                    <InputText id="name" class="form-control" @bind-Value="Brand.Name" />
                    <ValidationMessage For="@(() => Brand.Name)" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description</label>
                    <InputTextArea id="description" class="form-control" rows="4" @bind-Value="Brand.Description" />
                    <ValidationMessage For="@(() => Brand.Description)" />
                </div>
                <button type="submit" class="btn btn-primary">💾 Save Changes</button>
                <button type="button" class="btn btn-secondary ms-2" @onclick='() => NavManager.NavigateTo("/brand")'>Back</button>
            </div>
        </div>
    }
</EditForm>

@code {
    [Parameter] public int id { get; set; }
    private BrandAddDTO? Brand ;
    private string alertMessage;
    private string alertClass;

    protected override async Task OnInitializedAsync()
    {
        var bra = await BrandService.GetBrandByIdAsync(id);
        Brand = new BrandAddDTO { Id = bra.BrandId, Name = bra.Name, Description = bra.Description };
    }

    private async Task HandleValidSubmit()
    {
        var response = await BrandService.UpdateBrandAsync(Brand);

        if (response.Isuccess)
        {
            alertClass = "alert-success";
            alertMessage = response.Message ?? "Cập nhật danh mục thành công!";
            await Task.Delay(1000);
            NavManager.NavigateTo("/brands");
        }
        else
        {
            alertClass = "alert-danger";
            Console.WriteLine(response.Message);
            alertMessage = response.Message ?? "Cập nhật thất bại!";
        }
    }
}
