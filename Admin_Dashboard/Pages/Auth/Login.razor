@page "/login"
@inject Service.AuthService AuthService
@inject NavigationManager Nav

<div class="login-container">
    <div class="login-card">
        <h3 class="login-title">Đăng nhập</h3>

        @if (!string.IsNullOrEmpty(message))
        {
            <div class="@(loginSuccess ? "alert-success" : "alert-danger")">
                @message
            </div>
        }

        <EditForm Model="loginDTO" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label for="username">Tên đăng nhập</label>
                <InputText id="username" class="form-control" @bind-Value="loginDTO.UserName" placeholder="Nhập tên đăng nhập" />
                <ValidationMessage For="@(() => loginDTO.UserName)" />
            </div>

            <div class="form-group">
                <label for="password">Mật khẩu</label>
                <InputText id="password" class="form-control" @bind-Value="loginDTO.Password" type="password" placeholder="Nhập mật khẩu" />
                <ValidationMessage For="@(() => loginDTO.Password)" />
            </div>

            <div class="form-actions">
                <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Đang đăng nhập...</span>
                    }
                    else
                    {
                        <span>Đăng nhập</span>
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

<style>
    .login-container {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 80vh;
    padding: 20px;
    }

    .login-card {
    width: 100%;
    max-width: 400px;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    background-color: white;
    }

    .login-title {
    text-align: center;
    margin-bottom: 24px;
    color: #2c3e50;
    }

    .form-group {
    margin-bottom: 20px;
    }

    .form-control {
    display: block;
    width: 100%;
    padding: 10px 12px;
    font-size: 16px;
    border: 1px solid #ddd;
    border-radius: 4px;
    transition: border-color 0.15s ease-in-out;
    }

    .form-control:focus {
    border-color: #3498db;
    outline: 0;
    box-shadow: 0 0 0 0.2rem rgba(52, 152, 219, 0.25);
    }

    .form-actions {
    margin-top: 24px;
    }

    .btn {
    display: block;
    width: 100%;
    padding: 12px;
    font-size: 16px;
    border-radius: 4px;
    border: none;
    cursor: pointer;
    transition: background-color 0.15s ease-in-out;
    }

    .btn-primary {
    background-color: #3498db;
    color: white;
    }

    .btn-primary:hover {
    background-color: #2980b9;
    }

    .btn:disabled {
    opacity: 0.65;
    cursor: not-allowed;
    }

    .alert-danger {
    padding: 12px;
    color: #721c24;
    background-color: #f8d7da;
    border: 1px solid #f5c6cb;
    border-radius: 4px;
    margin-bottom: 20px;
    }

    .alert-success {
    padding: 12px;
    color: #155724;
    background-color: #d4edda;
    border: 1px solid #c3e6cb;
    border-radius: 4px;
    margin-bottom: 20px;
    }

    .validation-message {
    color: #dc3545;
    font-size: 14px;
    margin-top: 5px;
    }

    .text-center {
    text-align: center;
    }

    .mt-3 {
    margin-top: 1rem;
    }

    a {
    color: #3498db;
    text-decoration: none;
    }

    a:hover {
    text-decoration: underline;
    }
</style>

@code {
    private Admin_Dashboard.DTOs.loginDTO loginDTO = new();
    private string message = "";
    private bool isSubmitting = false;
    private bool loginSuccess = false;

    protected override void OnInitialized()
    {
        // Check if we arrived here from a redirect with an error parameter
        var uri = Nav.ToAbsoluteUri(Nav.Uri);
    }

    private async Task HandleLogin()
    {
        try
        {
            isSubmitting = true;
            message = "";

            // Data validation
            if (string.IsNullOrWhiteSpace(loginDTO.UserName))
            {
                message = "Vui lòng nhập tên đăng nhập";
                return;
            }

            if (string.IsNullOrWhiteSpace(loginDTO.Password))
            {
                message = "Vui lòng nhập mật khẩu";
                return;
            }

            var result = await AuthService.LoginAsync(loginDTO);

            if (result.IsSuccess)
            {
                loginSuccess = true;


                message = "Đăng nhập thành công, đang chuyển hướng...";

                // Short delay to show success message before navigation
                await Task.Delay(1000);
                Nav.NavigateTo("/", forceLoad: true);
            }
            else
            {
                message = result.Message ?? "Đăng nhập thất bại. Vui lòng kiểm tra lại thông tin đăng nhập.";
            }
        }
        catch (Exception ex)
        {
            message = $"Lỗi: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}