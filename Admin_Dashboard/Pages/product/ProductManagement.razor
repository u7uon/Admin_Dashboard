@page "/product"
@using Admin_Dashboard.DTOs
@using Admin_Dashboard.Service
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProductService productService

<h3>Product Management</h3>

<div class="mb-3">
    <button class="btn btn-primary" @onclick="Create">Add New Product</button>
</div>

@if (!string.IsNullOrEmpty(Message))
{
    <div class="alert @(Message.Contains("thành công") ? "alert-success" : "alert-danger") mt-3">
        @Message
    </div>
}

@if (loading)
{
    <p><em>Loading data...</em></p>
}
else if (error)
{
    <div class="alert alert-danger">
        @errorMessage
    </div>
}
else
{
    <ul class="nav nav-tabs mb-3">
        <li class="nav-item">
            <a class="nav-link @(activeTab == "active" ? "active" : "")" @onclick='() => SwitchTab("active")'>Active Products</a>
        </li>
        <li class="nav-item">
            <a class="nav-link @(activeTab == "inactive" ? "active" : "")" @onclick='() => SwitchTab("inactive")'>Inactive Products</a>
        </li>
    </ul>

    @if (activeTab == "active")
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Brand</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in ActiveProducts)
                {
                    <tr>
                        <td>@product.Id</td>
                        <td>
                            @if (!string.IsNullOrEmpty(product.Image))
                            {
                                <img src="@($"https://localhost:7081/api/product/images/{product.Image}")" alt="@product.Name" width="80" class="img-thumbnail" />
                            }
                            else
                            {
                                <span>No Image</span>
                            }
                        </td>
                        <td>@product.Name</td>
                        <td>@product.Price.ToString("C0", new System.Globalization.CultureInfo("en-US"))</td>
                        <td>@product.Quantity</td>
                        <td>@product.Description</td>
                        <td>@product.CategoryName</td>
                        <td>@product.BrandName</td>
                        <td>
                            <button class="btn btn-info btn-sm" @onclick="() => EditProduct(product.Id)">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-warning btn-sm" @onclick="() => UpdateStatus(product.Id, false)">
                                <i class="fa-regular fa-eye-slash"></i>
                            </button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-between align-items-center">
            <div>
                <span>Page @activeCurrentPage of @activeMaxPage</span>
            </div>
            <div>
                <button class="btn btn-secondary me-2" @onclick="PreviousActivePage" disabled="@(activeCurrentPage <= 1)">Previous</button>
                <button class="btn btn-secondary" @onclick="NextActivePage" disabled="@(activeCurrentPage >= activeMaxPage)">Next</button>
            </div>
        </div>
    }
    else
    {
        <table class="table table-bordered">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Image</th>
                    <th>Name</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Description</th>
                    <th>Category</th>
                    <th>Brand</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var product in UnActiveProducts)
                {
                    <tr>
                        <td>@product.Id</td>
                        <td>
                            @if (!string.IsNullOrEmpty(product.Image))
                            {
                                <img src="@($"https://localhost:7081/api/product/images/{product.Image}")" alt="@product.Name" width="80" class="img-thumbnail" />
                            }
                            else
                            {
                                <span>No Image</span>
                            }
                        </td>
                        <td>@product.Name</td>
                        <td>@product.Price.ToString("C0", new System.Globalization.CultureInfo("en-US"))</td>
                        <td>@product.Quantity</td>
                        <td>@product.Description</td>
                        <td>@product.CategoryName</td>
                        <td>@product.BrandName</td>
                        <td>
                            <button class="btn btn-info btn-sm" @onclick="() => EditProduct(product.Id)">Edit</button>
                            <button class="btn btn-success btn-sm" @onclick="() => UpdateStatus(product.Id, true)">Activate</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-between align-items-center">
            <div>
                <span>Page @inactiveCurrentPage of @inactiveMaxPage</span>
            </div>
            <div>
                <button class="btn btn-secondary me-2" @onclick="PreviousInactivePage" disabled="@(inactiveCurrentPage <= 1)">Previous</button>
                <button class="btn btn-secondary" @onclick="NextInactivePage" disabled="@(inactiveCurrentPage >= inactiveMaxPage)">Next</button>
            </div>
        </div>
    }
}




@code {
    private string Message = "";
    private List<ProductGetDTO> ActiveProducts = new();
    private List<ProductGetDTO> UnActiveProducts = new();
    private bool loading = true;
    private bool error = false;
    private string errorMessage = string.Empty;

    // Phân trang cho sản phẩm active
    private int activeCurrentPage = 1;
    private int activePageSize = 10;
    private int activeMaxPage = 1;

    // Phân trang cho sản phẩm inactive
    private int inactiveCurrentPage = 1;
    private int inactivePageSize = 10;
    private int inactiveMaxPage = 1;

    // Tab hiện tại
    private string activeTab = "active";

    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    private async Task LoadDataAsync()
    {
        loading = true;
        error = false;
        errorMessage = string.Empty;

        try
        {
            await LoadActiveProducts();
            await LoadInactiveProducts();
        }
        catch (Exception ex)
        {
            error = true;
            errorMessage = $"Lỗi khi tải dữ liệu: {ex.Message}";
            Console.WriteLine($"Error loading products: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadActiveProducts()
    {
        var activeResponse = await productService.LoadProduct(activeCurrentPage, true);
        if (activeResponse != null)
        {
            ActiveProducts = activeResponse.Items;
            activeCurrentPage = activeResponse.CurrentPage;
            activePageSize = activeResponse.PageSize;
            activeMaxPage = activeResponse.MaxPage;
        }
    }

    private async Task LoadInactiveProducts()
    {
        var inactiveResponse = await productService.LoadProduct(inactiveCurrentPage, false);
        if (inactiveResponse != null)
        {
            UnActiveProducts = inactiveResponse.Items;
            inactiveCurrentPage = inactiveResponse.CurrentPage;
            inactivePageSize = inactiveResponse.PageSize;
            inactiveMaxPage = inactiveResponse.MaxPage;
        }
    }

    private void Create()
    {
        Navigation.NavigateTo("/product/create");
    }

    private async Task PreviousActivePage()
    {
        if (activeCurrentPage > 1)
        {
            activeCurrentPage--;
            await LoadActiveProducts();
        }
    }

    private async Task NextActivePage()
    {
        if (activeCurrentPage < activeMaxPage)
        {
            activeCurrentPage++;
            await LoadActiveProducts();
        }
    }

    private async Task PreviousInactivePage()
    {
        if (inactiveCurrentPage > 1)
        {
            inactiveCurrentPage--;
            await LoadInactiveProducts();
        }
    }

    private async Task NextInactivePage()
    {
        if (inactiveCurrentPage < inactiveMaxPage)
        {
            inactiveCurrentPage++;
            await LoadInactiveProducts();
        }
    }

    private void EditProduct(int id)
    {
        Navigation.NavigateTo($"/product/edit/{id}");
    }

    private async Task UpdateStatus(int id, bool status)
    {
        try
        {
            var response = await productService.UpdateProductStatus(id, status);

            if (response.Isuccess)
            {
                Message = status
                    ? "Kích hoạt sản phẩm thành công"
                    : "Vô hiệu hóa sản phẩm thành công";

                // Tải lại dữ liệu sau khi cập nhật
                await LoadDataAsync();
            }
            else
            {
                Message = response.Message ?? "Cập nhật trạng thái thất bại";
            }
        }
        catch (Exception ex)
        {
            Message = $"Lỗi: {ex.Message}";
            Console.WriteLine($"Error updating product status: {ex.Message}");
        }
    }

    private void SwitchTab(string tab)
    {
        activeTab = tab;
    }
}