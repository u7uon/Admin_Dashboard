@page "/product/create"
@using Admin_Dashboard.DTOs
@using Admin_Dashboard.Service
@inject HttpClient Http
@inject NavigationManager Navigation
@inject ProductService productService


<hr />
<h4>Add New Product</h4>

<EditForm Model="newProduct" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row g-3">
        <div class="col-md-6">
            <label>Name</label>
            <InputText class="form-control" @bind-Value="newProduct.Name" />
            <ValidationMessage For="@(() => newProduct.Name)" />
        </div>
        <div class="col-md-6">
            <label>Price</label>
            <InputNumber class="form-control" @bind-Value="newProduct.Price" />
            <ValidationMessage For="@(() => newProduct.Price)" />
        </div>
        <div class="col-md-6">
            <label>Quantity</label>
            <InputNumber class="form-control" @bind-Value="newProduct.Quantity" />
            <ValidationMessage For="@(() => newProduct.Quantity)" />
        </div>
        <div class="col-md-6">
            <label>Image</label>
            <InputFile OnChange="HandleFileSelected" />
            <span class="text-danger">
                @ImageValidateMessage
            </span>
        </div>
        <div class="col-md-12">
            <label>Description</label>
            <InputText class="form-control" @bind-Value="newProduct.Description" />
            <ValidationMessage For="@(() => newProduct.Description)" />
        </div>
        <div class="col-md-6">
            <label>Brand</label>
            <select class="form-control" @bind="newProduct.BrandId">
                <option disabled selected>-- Select Brand --</option>
                @foreach (var b in brands)
                {
                    <option value="@b.BrandId">@b.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => newProduct.BrandId)" />
        </div>
        <div class="col-md-6">
            <label>Category</label>
            <select class="form-control" @bind="newProduct.CategoryId">
                <option disabled selected>-- Select Category --</option>
                @foreach (var c in categories)
                {
                    <option value="@c.Id">@c.Name</option>
                }
            </select>
            <ValidationMessage For="@(() => newProduct.CategoryId)" />
        </div>
    </div>

    <div class="mt-3">
        <button type="submit" class="btn btn-success">Add Product</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Redirect">Back</button>
    </div>
</EditForm>



@code {

    private string Message = "";
    private IBrowserFile? selectedFile;
    private List<ProductGetDTO> products = new();
    private List<BrandDTO> brands = new();
    private List<CategoryDTO> categories = new();
    private ProductAddDTO newProduct = new();
    private bool loading = true;
    private bool error = false;
    private string errorMessage = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;
    private int maxPage = 1;
    private bool showAddForm = false;
    private string ImageValidateMessage = "";


    protected override async Task OnInitializedAsync()
    {
        await LoadBrandsAndCategories();
    }


    private async Task LoadBrandsAndCategories()
    {
        try
        {
            brands = await Http.GetFromJsonAsync<List<BrandDTO>>("api/brand/all") ?? new List<BrandDTO>();
            categories = await Http.GetFromJsonAsync<List<CategoryDTO>>("api/category/all") ?? new List<CategoryDTO>();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading brands/categories: {ex.Message}");
        }
    }


    private async Task HandleValidSubmit()
    {
        Message = string.Empty;
        ImageValidateMessage = string.Empty;

        if (selectedFile is null)
        {
            ImageValidateMessage = "Vui lòng chọn ảnh";
            return;
        }
        var result = await productService.AddProduct(newProduct, selectedFile);

        if (result.Isuccess)
        {
            Redirect(); 
            newProduct = new ProductAddDTO();
            selectedFile = null;
        }
        else
        {
            Message = result.Message;
        }

    }

    private void Redirect()
    {
        Navigation.NavigateTo("/product");
    }


    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }
}
